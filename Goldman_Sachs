Ques 10.

Total Decoding Messages
class Solution{ 
public:
		int CountWays(string str){
		    string s=str;
		   if(s.length()==0 || s[0]=='0') return 0;
		   if(s.length()==1) return 1;
		   int count1=1,count2=1;
		   for(int i=1;i<s.length();i++){
		       int d=s[i]-'0';
		       int dd=(s[i-1]-'0')*10 + d;
		       int count =0;
		       if(d>0) count+=count2;
		       if(dd>=10 && dd<=26) count+=count1;
		       count1=count2;
		       count2=count;
		   }
		   return count2;
		}

}
Ques 11.

Find Missing And Repeating
class Solution:
public:
    int *findTwoElement(int *arr, int n) {
       int a,b;
       for(int i=0;i<n;i++){
           if(arr[abs(arr[i])-1]<0){
               a=abs(arr[i]);
           }
           else{
               arr[abs(arr[i])-1]= -arr[abs(arr[i])-1];
           }
       }
       for(int i=0;i<n;i++){
           if(arr[i]>0){
               b=i+1;
               break;
           }
       }
       int *v=new int[2];
       v[0]=a;
       v[1]=b;
       return v;
        
       
    }
};

Ques 12:
class Solution:
 public:
    long long squaresInChessBoard(long long N) {
        long long m=N; 
        
        long long ans=0;
        if(N==1){
            ans=1;
            return ans;
        }
        
        int i=0;
      
        while(N--){
            ans+=((m-i)*(m-i));
            i++;
        }
       
        return ans;
    }
};

Ques 13:

class Solution:
    def decodeString(self, s: str) -> str:
        stack = []; curNum = 0; curString = ''
        for c in s:
            if c == '[':
                stack.append(curString)
                stack.append(curNum)
                curString = ''
                curNum = 0
            elif c == ']':
                num = stack.pop()
                prevString = stack.pop()
                curString = prevString + num*curString
            elif c.isdigit():
                curNum = curNum*10 + int(c)
            else:
                curString += c
        return curString 
        
 Ques 14:
 
 int minSubArrayLen(int s, vector<int>& nums)
{
    int n = nums.size();
    if (n == 0)
        return 0;
    int ans = INT_MAX;
    vector<int> sums(n + 1, 0); //size = n+1 for easier calculations
    //sums[0]=0 : Meaning that it is the sum of first 0 elements
    //sums[1]=A[0] : Sum of first 1 elements
    //ans so on...
    for (int i = 1; i <= n; i++)
        sums[i] = sums[i - 1] + nums[i - 1];
    for (int i = 1; i <= n; i++) {
        int to_find = s + sums[i - 1];
        auto bound = lower_bound(sums.begin(), sums.end(), to_find);
        if (bound != sums.end()) {
            ans = min(ans, static_cast<int>(bound - (sums.begin() + i - 1)));
        }
    }
    return (ans != INT_MAX) ? ans : 0;
}
Ques 15:

 bool canPairs(int arr[], int n, int k)
{

if (n & 1)
return false;


unordered_map<int, int> freq;


for (int i = 0; i < n; i++)
freq[((arr[i] % k) + k) % k]++;


for (int i = 0; i < n; i++) {

int rem = ((arr[i] % k) + k) % k;


if (2 * rem == k) {

if (freq[rem] % 2 != 0)
return false;
}


else if (rem == 0) {
if (freq[rem] & 1)
return false;
}


else if (freq[rem] != freq[k - rem])
return false;
}
return true;
}
};
